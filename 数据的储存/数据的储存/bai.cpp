#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>

//浮点数的存储规则

int main()//
{
	int n = 9;
	//00000000 00000000 00000000 00001001补码
	float* pf = (float*)&n;
	printf("n的值是：%d\n", n);//0
	//00000000 00000000 00000000 00001001补码
	printf("*pf的值是：%f\n", *pf);//0.000000
	//00000000 00000000 00000000 00001001,E为全0，M补0，只打印6位，故是0.000000
	*pf = 9.0;
	//1001.0
	// (-1)^0*1.001*2^3
	//S0E3M((1)00100000.....
	//0 10000010 00100000000000000000000000
	printf("n的值是：%d\n", n);//1091567616
	//0 10000010 00100000000000000000000000打印的整数1091567616的二进制数
	printf("*pf的值是：%f\n", *pf);//9.000000
	return 0;
}
/*
int main(){
float a=5.5;
//5.5
//101.1
//(-1)^0*1.011*2^2
//S=0,M=1.011,E=2  (放进去的是2+127）s:1bit,e:8bit,m:23bit,
//0 10000001  01100000000000000000000//011后面的0是补进去的
//S(    E   )(          M            )
return 0;
}
*/

//整型提升和整形的存贮规则，补码，大端小端，范围

//int main()
//{
//	double rl = 1E10;
//	printf("%lf\n", rl);//打印浮点数
//	return 0;
//}

//int main()//-128后面是127，然后一直到0，所以结局是255
//{
//	char a[1000];
//	for (int i = 0; i < 1000; i++)
//	{
//		a[i] = -1 - i;
//	}
//	printf("%d", strlen(a));
//	return 0;
//}

//int main()
//{
//	unsigned int i;
//	for (i = 9; i >= 0;i--)
//	{
//		printf("%u\n", i);
//	}//死循环，i恒为正
//	return 0;
//}

//int main()
//{
//	char a = 128;//128就是127+1，而char里面127+1就是-128
//	printf("%u\n", a);
//	char b = -128;
//	printf("%u\n", b);
//	return 0;
//}
//int main()
//{
//	char a = -128;//有符号的char的范围是-128~127（-128的二进制数是10000000）无符号的char范围是0~255（11111111）
//	//10000000 00000000 00000000 10000000原码
//	//11111111 11111111 11111111 01111111反码
//	//11111111 11111111 11111111 10000000补码（整型提升的时候是看a的类型是有符号数，所以要补1
//	printf("%u\n", a);//输出的是无符号数补码
//	//%d打印十进制的有符号数（打印的原码
//	//%u打印十进制的无符号数(打印的补码
//	return 0;
//}

//int main()
//{
//	char a = -1;
//  10000000 00000000 00000000 ）前面是整型提升00000001原码
//  11111111 11111111 11111111 11111110反码
//  11111111 11111111 11111111 11111111补码
//	signed char b = -1;
//	unsigned char c = -1;
//	printf("a=%d,b=%d,c=%d",a, b, c);
//	return 0;//整形提升，无符号补0，-号补1
//}

//判断一个电脑是大端还是小端存储模式

//int judge()
//{
//	int i = 1;
//	return *(char*)&i;
//	//再优化>
//	/*char* p = (char*)&i;
//	return *p;*/
//	//优化>
//	//char* p =(char*) & i;
//	//if (*p == 0)
//	//{
//	//	return 0;
//	//}
//	//else
//	//{
//	//	return 1;
//	//}
//}
//int main()//判断一个电脑是大端还是小端存储模式
//{
//	int ret=judge();
//	if (ret == 0)
//	{
//		printf("大端存储模式\n");
//	}
//	else
//	{
//		printf("小端存储模式\n");
//	}
//	return 0;
//}

//int main()
//{
//	int a = 10;
//	int b = -22;
//	return 0;
//}

//void test()
//{
//	printf("hahahahaha\n");
//}
//int main()
//{
//	test();
//	return 0;
//}